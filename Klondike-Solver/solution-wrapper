#!/usr/bin/perl

use strict;
use warnings;

use IO::All;
use Path::Tiny qw/ path /;
use Getopt::Long qw(GetOptions);

my ($board_fn, $help);

GetOptions(
    'h|help' => \$help,
    'board=s' => \$board_fn,
) or die "Wrong arguments - $! - type --help for more info.";

if ($help)
{
    print <<'EOF';
This program verifies the Klondike solutions of KlondikeSolver (
https://github.com/shlomif/KlondikeSolver ) and displays them in a more
user-friendly manner.

It requires:

1. An initial board as given by «make_pysol_freecell_board.py -t 24 klondike»
(note the "-t").

2. A solution as given by:

make_pysol_freecell_board.py -t 24 klondike | perl from-fc-solve-board-gen > deck.txt
./KlondikeSolver deck.txt | tee solution.txt

After that run it with --board and --solution and capture its output to
standard output.
EOF
    exit(0);
}
if (!defined($board_fn))
{
    die "--board or --help not specified.";
}

my $board_str = io->file($board_fn)->all();
my $temp = Path::Tiny->tempdir;
my $board = $temp->child("board.txt");
my $b2 = $temp->child("board2.txt");
my $sol = $temp->child("sol2.txt");
$board->spew_utf8($board_str);
system("< $board from-fc-solve-board-gen > $b2");
system("KlondikeSolver /MOVES $b2 > $sol");
system("display-solution --board $board --solution $sol");

